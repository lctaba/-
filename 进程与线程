## 进程与线程的区别

#### 进程

分配资源的最小单位。

#### 线程

一个进程中有多个线程，线程是独立调度的最小单位，共享进程资源。

#### 区别

线程不拥有资源，只能访问进程资源

创建或撤销进程时，系统都要分配回收资源，如内存，IO设别，开销大于线程。

进程切换时需要保存的东西很多，比如旧进程的运行环境的保存和新进程的运行环境的设置，线程切换只需要保存少量寄存器，开销小。

线程通信只需要通过读写同一进程的数据，而进程则需要借助其他手段

#### 进程的状态

就绪、运行、阻塞

#### 进程调度算法

###### 先来先服务

###### 短作业优先

###### 最短剩余时间优先

###### 时间片轮转

###### 优先级调度

###### 多级反馈序列

多个队列，优先级高的时间片短，没运行完旧放到下一个时间片长的优先级低的队列。

#### 进程同步（用于进程按一定顺序执行）

- 临界区：各个进程互斥访问
- 信号量：PV操作，P操作信号量减1，V操作+1，信号量大于0才可以继续执行。

生产者消费者：必须先判断缓冲区是否为空，再获取mutex。

#### 进程通信（用于进程间传递消息）

- 管道：

  - 半双工通信：单向交替传输
  - 在父子进程和兄弟进程使用

- 命名管道：

  去除了只能在父子线程中使用的限制

- 消息队列：

  - 异步处理，避免了 FIFO 的同步阻塞问题，不需要进程自己提供同步方法；
  - 消息队列独立于读写进程存在
  - 读进程可以根据消息类型有选择地接收消息，而不像 FIFO 那样只能默认地接收。

- 信号量：

  它是一个计数器，用于为多个进程提供对共享数据对象的访问。

- 共享内存：

  - 两个不同的虚拟地址通过页表映射到物理空间的同一区域，它们所指向的这块区域即共享内存。

  - 对于一个共享内存，实现采用的是引用计数的原理，当进程脱离共享存储区后，计数器减一，挂架成功时，计数器加一，只有当计数器变为零时，才能被删除。当进程终止时，它所附加的共享存储区都会自动脱离。

  - mmap是一种内存映射文件的方法，

    - 即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一 一对映关系。

    - 实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，如果写操作改变了其内容，一定时间后系统会自动回写脏页面到对应磁盘地址，也即完成了写入到文件的过程。

      注：修改过的脏页面并不会立即更新回文件中，而是有一段时间的延迟，可以调用msync()来强制同步, 这样所写的内容就能立即保存到文件里了。

      即完成了对文件的操作而不必再调用read,write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现不同进程间的文件共享。

      **常规文件操作需要从磁盘到页缓存再到用户主存的两次数据拷贝。而mmap操控文件，只需要从磁盘到用户主存的一次数据拷贝过程。**说白了，mmap的关键点是实现了用户空间和内核空间的数据直接交互而省去了空间不同数据不通的繁琐过程。因此mmap效率更高。

- socket：
  - 用ip，协议，端口就可以标识一个进程。





## 死锁

必要条件：

- 互斥，两个进程不能同时使用资源。

- 不可剥夺。
- 占有等待：一个资源因请求资源而阻塞时不会释放资源。
- 循环等待：两个或以上的资源都在等待另一个相互之间资源的释放。

处理办法：

- 鸵鸟策略：不管
- 死锁检测恢复：不预防，发送死锁后恢复
- 预防：破坏四个死锁条件

